package com.loopback.androidapps.saveapp;

import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.PixelFormat;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

public class HomeActivity extends Activity implements View.OnClickListener {

	private double[] currentLocation;
	private TextView txtAccountSelection, txtBudget, txtNumberOfDays;
	private ImageButton btnAccountSelection, btnAdd, btnTake, btnPlot, btnAll,
			btnMap, btnAccountEdit;

	public SaveApp saveApp;

	/*------------------------------------------------------------------------------------------------
	 *-------------------------------------ON CREATE--------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFormat(PixelFormat.RGBA_8888);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_DITHER);
		
			setContentView(R.layout.main);

		loadActivity();
	}

	/*------------------------------------------------------------------------------------------------
	 *-------------------------------------LOAD ACTIVITY--------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */

	public void loadActivity() {

		Log.i("HA", "Init App...");
		// Application Context
		saveApp = ((SaveApp) getApplicationContext());

		// DataBase
		Log.i("HA", "Init DB...");
		saveApp.setDbManager(new DBManager(getBaseContext()));
		Log.i("HA", "DB Created.");

		// Layout
		btnAccountSelection = (ImageButton) findViewById(R.id.btnAccountSelection);
		txtAccountSelection = (TextView) findViewById(R.id.txtAccountSelection);
		btnAdd = (ImageButton) findViewById(R.id.btnAdd);
		btnTake = (ImageButton) findViewById(R.id.btnTake);
		btnAll = (ImageButton) findViewById(R.id.btnAll);
		btnMap = (ImageButton) findViewById(R.id.btnMap);
		btnPlot = (ImageButton) findViewById(R.id.btnPlot);
		btnAccountEdit = (ImageButton) findViewById(R.id.btnAccountEdit);
		txtBudget = (TextView) findViewById(R.id.txtBudget);
		txtNumberOfDays = (TextView) findViewById(R.id.txtNumberOfDays);

		btnAdd.setOnClickListener(this);
		btnTake.setOnClickListener(this);
		btnAll.setOnClickListener(this);
		btnMap.setOnClickListener(this);
		btnPlot.setOnClickListener(this);
		btnAccountEdit.setOnClickListener(this);
		btnAccountSelection.setOnClickListener(this);

	}

	/*------------------------------------------------------------------------------------------------
	 *------------------------------------- ACTIVITY LIFE CICLE--------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */
	// RESUME
	public void onResume() {
		super.onResume();
		getAddress();
		setAccount(saveApp.getAccountId());
		setPreview();
	}

	// STOP
	protected void onStop() {
		super.onStop();

		SharedPreferences settings = getSharedPreferences(
				getString(R.string.prefs_name), 0);
		SharedPreferences.Editor editor = settings.edit();

		editor.putInt("Account", saveApp.getAccountId());
		editor.commit();
	}

	/*------------------------------------------------------------------------------------------------
	 *--------------------------------------CLICKS--------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */
	public void onBackPressed() {
		Log.i("HA", "Finishing SaveApp");
		HomeActivity.this.finish();
	}

	public void onClick(View v) {
		// Add
		if (v == btnAdd) {
			Log.i("HA", "Button Add Clicked");
			saveApp.setAdding(true);
			saveApp.setDate(Utilities.dateGetter());
			
			saveApp.outlay.setCharge(0);
			saveApp.outlay.setItemDesc("");
			saveApp.outlay.setPlaceDesc("");
			saveApp.outlay.setNote("");
			saveApp.outlay.setDate(saveApp.getDate());
			saveApp.outlay.setAddressDesc(saveApp.getAddressDesc());

			Bundle bundle = new Bundle();
			bundle.putInt("Id", 0);
			bundle.putBoolean("HasChanges", false);// If comes from
													// ChangeAutogenerated

			Intent intent = new Intent(this.getApplicationContext(),
					OutlayEditActivity.class);
			intent.putExtras(bundle);
			startActivity(intent);
		}
		if (v == btnTake) {
			Log.i("HA", "Button Take Clicked");
			saveApp.setAdding(false);
			saveApp.setDate(Utilities.dateGetter());

			saveApp.outlay.setCharge(0);
			saveApp.outlay.setItemDesc("");
			saveApp.outlay.setPlaceDesc("");
			saveApp.outlay.setNote("");
			saveApp.outlay.setDate(saveApp.getDate());
			saveApp.outlay.setAddressDesc(saveApp.getAddressDesc());
			
			Bundle bundle = new Bundle();
			bundle.putInt("Id", 0);
			bundle.putBoolean("HasChanges", false);// If comes from
													// ChangeAutogenerated

			Intent intent = new Intent(this.getApplicationContext(),
					OutlayEditActivity.class);
			intent.putExtras(bundle);
			startActivity(intent);
		}

		// Plots
		else if (v == btnPlot) {
			Log.i("HA", "Button Plot Clicked");
			Intent intent = new Intent(this.getApplicationContext(),
					PlotActivity.class);
			startActivity(intent);
		}

		// All
		else if (v == btnAll) {
//			ProgressDialog.show(HomeActivity.this, "",
//					" Loading. Please wait ... ", true);
			Log.i("HA", "Button All Clicked");
			Intent intent = new Intent(this.getApplicationContext(),
					OutlaysListActivity.class);
			startActivity(intent);
		}

		// Map
		else if (v == btnMap) {
			Log.i("HA", "Button Map Clicked");
			Intent intent = new Intent(this.getApplicationContext(),
					MapAccountActivity.class);
			startActivity(intent);
		}
		// Account edition
		else if (v == btnAccountEdit) {
			Log.i("HA", "Button Account Clicked");
			Toast.makeText(this,
					"More than one account is not allowed in this version",
					Toast.LENGTH_LONG).show();
			Intent intent = new Intent(this.getApplicationContext(),
					AccountDetailActivity.class);
			startActivity(intent);
			// Account Selection
		} else if (v == btnAccountSelection) {

			final CharSequence[] accounts;
			Account account = new Account();
			accounts = account.selectAccounts();
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setTitle("Chooese Account");
			builder.setItems(accounts, new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int _item) {
					saveApp.setAccountId(_item + 1);
					setAccount(saveApp.getAccountId());
					setPreview();
					txtAccountSelection.setText(getString(R.string.strAccount)
							+ ": " + accounts[_item]);
				}
			});
			AlertDialog dropdown = builder.create();
			dropdown.show();
		}
	}

	/*------------------------------------------------------------------------------------------------
	 *--------------------------------------SET ACCOUNT--------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */

	public void setAccount(int id) {
		Log.i("HA", "Set Account...");
		saveApp.setAccountId(id);
		Account account = new Account();
		account.inflate(saveApp.getAccountId());
		saveApp.setAccountDesc(account.getDescription());
		saveApp.setCurrencyId(account.getCurrencyId());
		Currency currency = new Currency();
		currency.inflate(saveApp.getCurrencyId());
		saveApp.setCurrencySymbol(currency.getSymbol());
		txtAccountSelection.setText(getString(R.string.strAccountSelection)
				+ ": " + saveApp.getAccountDesc());
	}

	/*------------------------------------------------------------------------------------------------
	 *--------------------------------------SET PREVIEW BUDGET + DAYS---------------------------------
	 *------------------------------------------------------------------------------------------------ */

	public void setPreview() {
		Log.i("HA", "Set Preview...");

		// Actual Budget
		Account account = new Account();
		account.inflate(saveApp.getAccountId());
		saveApp.setBudget(account.getBudget());
		saveApp.setStartDate(account.getStartDate());
		saveApp.setCurrentBudget(Utilities.calculateCurrentBudget());
		txtBudget.setText(saveApp.getCurrentBudget() + saveApp.getCurrencySymbol());

		// Number of days
		String date = account.getStartDate();
		saveApp.setCurrentDays(Utilities.daysUntilToday(date));
		txtNumberOfDays.setText(String.valueOf(saveApp.getCurrentDays()));
	}

	/*------------------------------------------------------------------------------------------------
	 *--------------------------------------LOCATION--------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */
	private double[] getLocation() {
		Log.i("HA", "Get Localization");
		LocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		List<String> providers = lm.getProviders(true);

		Location l = null;

		for (int i = providers.size() - 1; i >= 0; i--) {
			l = lm.getLastKnownLocation(providers.get(i));
			if (l != null) {
				Log.i("OEA", "MAP");
				break;
			}
		}

		double[] gps = new double[2];
		if (l != null) {
			gps[0] = l.getLatitude();
			gps[1] = l.getLongitude();
		}
		if (gps[0] == 0.0 || gps[1] == 0.0) {
			gps[0] = 40.416700;
			gps[1] = -3.703900;
		}
		saveApp.setLatitude(gps[0]);
		saveApp.setLongitude(gps[1]);
		return gps;
	}

	public void getAddress() {
		Log.i("HA", "Get Address");
		currentLocation = getLocation();
		Geocoder geoCoder = new Geocoder(getBaseContext(), Locale.getDefault());
		List<Address> addresses;
		try {
			addresses = geoCoder.getFromLocation(currentLocation[0],
					currentLocation[1], 1);
			String addresDesc = "";
			if (addresses.size() > 0)
				for (int i = 0; i < addresses.get(0).getMaxAddressLineIndex(); i++)
					addresDesc += addresses.get(0).getAddressLine(i) + "\n";
			saveApp.setAddressDesc(addresDesc);
		} catch (Exception ex) {
		}
	}
	/*------------------------------------------------------------------------------------------------
	 *--------------------------------------MENU------------------------------------------------------
	 *------------------------------------------------------------------------------------------------ */

	public boolean onCreateOptionsMenu(Menu menu) {
		Log.i("ODA", "Menu Inflating...");
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.menuhome, menu);
		Log.i("ODA", "Menu Inflated");
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Log.i("ODA", "Menu...");
		switch (item.getItemId()) {
		case R.id.mnuAbout:
			Log.i("ODA", "Menu Info");
			Intent intentEdit = new Intent(this.getApplicationContext(),
					AboutActivity.class);
			startActivity(intentEdit);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

}
